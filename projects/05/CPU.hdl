// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // First bit of instruction (instruction[15]) is the op-code - 0 is for A instruction and 1 is for C instruction
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=AorCInstructionAddress);

    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=shouldSetARegister);
    // instruction[5] is d1 and this bit instructs whether or not to load the A register.
    ARegister(in=AorCInstructionAddress, load=shouldSetARegister, out=ARegisterOut, out[0..14]=addressM);

    // The "a" bit in the instruction (instruction[12]) if 0 then A otherwise M
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=ALUInputAOrM);

    // instruction[4] is d2 and this bit instructs whether or not to load the D register.
    And(a=instruction[15], b=instruction[4], out=shouldLoadDRegister);
    DRegister(in=ALUOut, load=shouldLoadDRegister, out=ALUInputD);

    // instruction[6..11] are bits c6, c5, c4, c3, c2, c1 => no, f, ny, zy, nx, zx
    ALU(x=ALUInputD, y=ALUInputAOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=ALUOut, out=outM);

    And(a=instruction[3], b=instruction[3], out=isWriteToMBitSet);
    And(a=isWriteToMBitSet, b=instruction[15], out=writeM);

    Not(in=zr, out=NotZr);
    Not(in=ng, out=NotNg);
    Not(in=EqualTo0, out=NotEqualTo0);

    And(a=NotZr, b=NotNg, out=GreaterThan0);
    And(a=zr, b=zr, out=EqualTo0);
    Or(a=zr, b=NotNg, out=GreaterEqualTo0);
    And(a=NotZr, b=ng, out=LessThan0);
    Or(a=zr, b=ng, out=LessEqualTo0);

    // Mux8Way16(a=false, b=GreaterThan0, c=EqualTo0, d=GreaterEqualTo0, e=LessThan0, f=NotEqualTo0, g=LessEqualTo0, h=true, sel=instruction[0..2], out=shouldJump16);
    Mux8Way16(a=false, b[15]=GreaterThan0, c[15]=EqualTo0, d[15]=GreaterEqualTo0, e[15]=LessThan0, f[15]=NotEqualTo0, g[15]=LessEqualTo0, h=true, sel=instruction[0..2], out=shouldJump16, out[15]=shouldJump);
    And(a=instruction[15], b=shouldJump, out=shouldLoad);
    Not(in=shouldLoad, out=shouldInc);


    PC(in=ARegisterOut, reset=reset, inc=shouldInc, load=shouldLoad, out[0..14]=pc);
}