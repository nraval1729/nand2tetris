// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[12..14], a=toRAM16K1, b=toRAM16K2, c=toRAM16K3, d=toRAM16K4, e=toScreen1, f=toScreen2, g=g, h=h);
    Or(a=toRAM16K1, b=toRAM16K2, out=toRAM16K1Or2);
    Or(a=toRAM16K3, b=toRAM16K4, out=toRAM16K3Or4);
    Or(a=toRAM16K1Or2, b=toRAM16K3Or4, out=toRAM16K);

    Or(a=toScreen1, b=toScreen2, out=toScreen);

    RAM16K(in=in, load=toRAM16K, address=address[0..13], out=outRAM16K);
    Screen(in=in, load=toScreen, address=address[0..12], out=outScreen);
    Keyboard(out=outKeyboard);

    Mux8Way16(a=outRAM16K, b=outRAM16K, c=outRAM16K, d=outRAM16K, e=outScreen, f=outScreen, g=outKeyboard, h=outKeyboard, sel=address[12..14], out=out);
}